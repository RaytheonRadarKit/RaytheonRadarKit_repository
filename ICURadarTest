// Revised by Michael Oravec 3/10/2023
// Changed 'target' color to yellow, added inches to Distance readout
// Revised by Branden Levenson 7/13/2024
// Fixed the Serial Connection Process for boot 

// 1if the radar screen shows up but no lines or dots appear, change the value of portNumber to be 0, 1, or 2
int portNumber = 2;

//if it's still broken, you may need to reupload the Arduino script (open the Arduino file)

// correction for angle calibration based on bistatic sonar, off-angle setup
int correction = 0;

import processing.serial.*; // imports library for serial communication
import java.awt.event.KeyEvent; // imports library for reading the data from the serial port
import java.io.IOException; 

Serial myPort; // defines Object Serial

// define variables
String angle="";
String distance="";
String data="";
String noObject;
String num_of_pings="";
float pixsDistance;
int iAngle, iDistance, iNum_of_pings; //iDistancetotal;
int index1=0;
int index2=0;
int Tx, Ty;

int maxRange=100;  //  range is currently limited to 100 cm,  Range rings, labels, and red/green lines need to be resized for each maximum range specified.

float dispScale;
void setup() {
   size (1366, 768); //   Defines the dimension of the display window width and height in units of pixels.
   dispScale = width/1920.0;  //  This scales all graphics from 1920,1080 to max native width in 16:9 layout

   smooth();
  
  //Serial Connection Processing
  boolean connected = false;
  for (int i = 0; i < Serial.list().length; i++) {
    try {
      String portName = Serial.list()[i];
      myPort = new Serial(this, portName, 9600);
      myPort.bufferUntil('.'); // reads the data from the serial port up to the character '.'. So actually it reads this: angle, distance, countmax.
      connected = true;
      portNumber = i; // Store the port index that worked
      System.out.println("Connected to port: " + portName);
      break; // Exit the loop once connected
    } catch(Exception e) {
      System.out.println("Failed to connect to port: " + Serial.list()[i]);
    }
  }
  
  if (!connected) {
    System.out.println("Serial Not Connected"); 
  }
}

void draw() {
  fill(120, 45); //First number sets background color of PPI display.  The lower the number, the darker the background.  
  //Second color sets the fading (with time) of the green strobes and red target dots.  The lower the value, the less the fading of the green strobes and red target dots.

  rect(0, 0, width, height); //First two numbers set the size of the background rectangle whose color is controlled by fill command above.  0, 0 is full size; as these numbers increase the background rectangle becomes smaller.
  // First number decreases width of background rectangle and the second number decreases height of the background rectangle.

  scale(dispScale);
  drawRadar();
  drawObject();
  drawLine();
  drawText();
}

void serialEvent (Serial myPort) { // starts reading data from the Serial Port
  // reads the data from the Serial Port up to the character '.' and puts it into the String variable "data".
  data = myPort.readStringUntil('.');
  if (data.length()>6) { // seems that increasing the min length makes freezing on startup less and less likely
  data = data.substring(0, data.length()-1);

  index1 = data.indexOf(","); // find the character ',' and puts it into the variable "index1"
  index2 = data.indexOf(";"); // find the character ';' and puts it into the variable "index2"

  angle = data.substring(0, index1); // read the data from position "0" to position of the variable index1; data is the value of the angle the Arduino Board sent into the Serial Port
  distance = data.substring(index1+1, index2); // read the data from position "index1" to position of variable index2; data is the value of the average distance measured and calculated
  num_of_pings = data.substring(index2+1, data.length()); // read the data from position "index2" to the end of the data; data is the value of the variable countmax


  // converts the String variables into Integer

  iAngle = int(angle) + correction;
  iDistance =int(distance);
  iNum_of_pings =int(num_of_pings);
  }
}

void mouseClicked() { // clears screen of dots when mouse is clicked
  myPort.stop();
  boolean connected = false;
  for (int i = 0; i < Serial.list().length; i++) {
    try {
      String portName = Serial.list()[i];
      myPort = new Serial(this, portName, 9600);
      myPort.bufferUntil('.'); 
      connected = true;
      portNumber = i; 
      System.out.println("Reconnected to port: " + portName);
      break; 
    } catch(Exception e) {
      System.out.println("Failed to reconnect to port: " + Serial.list()[i]);
    }
  }
  
  if (!connected) {
    System.out.println("Failed to reconnect after mouse click.");
  }
}

void drawRadar() { /* Radar rendering logic */ }
void drawObject() { /* Object rendering logic */ }
void drawLine() { /* Line rendering logic */ }
void drawText() { /* Text rendering logic */ }
